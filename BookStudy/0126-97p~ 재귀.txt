page 97, 선형이하 시간 알고리즘


선형 이하시간 알고리즘이란?
  O(logN) : 1/2씩 계속 나눠서 1이하가 될 댸 까지 몇번이나 나눠야 하는지 === 이진탐색!

이진탐색 
  binsearch(array, x) 오름차순으로 정렬된 배열 array와 찾고 싶은 값 x에 대해서
  array[i-1] < x <= A[i]인 i의 값을 반환한다.
  
  아하 따라서 배열 array에서 x를 삽입할 수 있는 최초의 곳에 삽입한다고 보면 됨




지수시간 알고리즘
  다항시간 알고리즘
    변수 N고 N^2, 그 외 N의 거듭제곱들의 선형 결합으로 이루어진 식들 --> 다항식
    반복문의 시행횟수를 입력 크기의 다항식으로 표현할 수 있는 알고리즘 --> 다항시간 알고리즘




-----------------------------------------------
재귀호출
  기저사례 : 재귀로 쪼갰을 때 쪼개지지 않는 가장 작은 작업들을 가리킴


완전탐색 : 7C2같은 문제를 재귀로 구현하는게 용이함
  모든 경우의 수를 print 해야한다거나 배열에 넣어야 한다거나 하는 문제를 재귀로

완전탐색 레시피 
  1) 완전탐색은 존재하는 모든 답을 하나씩 검사하므로 걸리는 시간은 가능한 답의 수에 정확히 비례한다.
     최대 크기의 입력을 가정했을 때 답의 개수를 계산하고 이들을 모두 제한시간 안에 생성할 수 있을지를 가늠,
     만약 시간안에 계산할 수 없다면 쓰면 안됨

  2) 가능한 모든 답의 후보를 만드는 과정을 여러개의 선택으로 나눕니다. 각 선택은 답의 후보를 만드는 과정의 한 조각이 됩니다.
  3) 그 중 하나의 조각을 선택해 답의 일부를 만들고, 나머지 답을 재귀호출을 통해 완성합니다.
  4) 조각이 하나밖에 남지 않은 경우, 혹은 하나도 남지 않은 경우에는 답을 생성했으므로 이것을 기저 사례로 선택해 처리합니다.



---------------------------------------

재귀의 설계
1) 적어도 하나의 base case
2) 모든 case는 결국 base case로 수렴해야 함



**암시적 매개변수를 명시적 매개변수로 바꾸어라!
  순차탐색알고리즘을 예로 본다면
  0~n-1까지의 데이터를 본다면 0은 암시적, n-1은 명시적이란 건데 흠
  매개변수와 같이 들어오는걸로 표현하란 건가?

  그니까 일반적으로 recursion으로 설계를 할 때는, 0~n을 할 때 0도 매개변수로 넘기고 n도 매개변수로 넘겨라는 거임

  이런식으로 begin과 end를 모두 입력으로 받는게 좋다는거지
  function search(arr, begin, end, target) {
    if (begin > end) return -1;
    else if (target === arr[begin]) return begin;
    else return search(arr, begin + 1, end, target);
  }
